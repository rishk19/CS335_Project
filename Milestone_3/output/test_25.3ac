Hello 

short_circuit::printInt : 
begin_func
$rsp = $rsp - 8
push $rbp
$rbp = $rsp
load n (20)$rbp 4
load n2 (24)$rbp 4
push 1 (4)$rbp
$load $rbp (0)$rbp 8
$rsp = $rbp + 8
end_func


short_circuit::main : 
begin_func
$rsp = $rsp - 8
push $rbp
$rbp = $rsp
$rsp = $rsp - 848
load k (20)$rbp 4
i = 0
L5:
%t0 = i <int i
if %t0 = 0 goto L6:
%t3 = 1 +byte 2
%t4 = %t3 +byte 3
abc = %t4
%t1 = i +int 1
i = %t1
%t2 = i +int 1
i = %t2
goto L5:
L6:
%t7 = 0 +byte 2
a = %t7
b = 2.3f
arr[][][] = 
%t8 = 6 * 80
%t9 = 7 *byte 8
%t10 = 4 +byte %t9
%t11 = %t10 * 16
%t12 = %t8 + %t11
%t13 = 1 * 4
%t14 = %t12 + %t13
%t15 = 9 *byte 7
%t16 = 2 +byte %t15
arr[%t14] = %t16
arr2[] = 
%t17 = 1 * 4
arr2[%t17] = 1
%t20 = cast_to_int 2
%t18 = 2 * 4
%t19 = arr2[%t18]
%t21 = %t19 +int %t20
i = %t21
$rsp = $rsp - 8// stack space for actual parameters 
push a $rsp
push 3 (4)$rsp
$rsp = $rsp - 12 // stack space for return value, pc
push PC // pushin program counter 
call printInt2 
$rsp = $rsp + 8
%t22 = pop (4)$rsp
$rsp = $rsp - 12  // Popping return value and arguments
push 4 (4)$rbp
$load $rbp (0)$rbp 8
$rsp = $rbp + 8
end_func

